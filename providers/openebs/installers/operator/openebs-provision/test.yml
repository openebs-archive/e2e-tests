---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:
    - block:

         ## Generating the testname for deployment
        - include_tasks: /utils/fcm/create_testname.yml

         ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: "/utils/fcm/update_e2e_result_resource.yml"
          vars:
            status: 'SOT'

        - block:

            - name: Creating pod security policy, cluster role and clusterrolebinding
              shell: kubectl apply -f {{ psp_spec }}
              args:
                executable: /bin/bash
              register: psp_status
              failed_when: "psp_status.rc != 0"

            - block:

                ## Obtaining the OpenEBS operator from charts.
                ## If the chart is not created, openebs operator will be downloaded from master branch.
                - name: Downloading openebs-operator.yaml
                  get_url:
                    url: "{{ openebs_link }}"
                    dest: "{{ playbook_dir }}/{{ openebs_operator }}"
                    force: yes
                  register: operator_file
                  ignore_errors: true
                  until:  "'OK' in operator_file.msg"
                  delay: 5
                  retries: 3

                - block:

                    - name: Downloading openebs-operator from charts
                      get_url:
                        url: "{{ new_operator_link }}"
                        dest: "{{ playbook_dir }}/{{ openebs_operator }}"
                        force: yes
                      register: new_operator
                      ignore_errors: true
                      until:  "'OK' in new_operator.msg"
                      delay: 5
                      retries: 3

                    - block: 

                        - name: Downloading openebs-operator.yaml
                          get_url:
                            url: "{{ openebs_operator_link }}"
                            dest: "{{ playbook_dir }}/{{ openebs_operator }}"
                            force: yes
                          register: result
                          until:  "'OK' in result.msg"
                          delay: 5
                          retries: 3

                        - name: Change the Node Disk manager Image
                          replace:
                            path: "{{ openebs_operator }}"
                            regexp: openebs/node-disk-manager:ci
                            replace: openebs/node-disk-manager:{{ ndm_tag }}

                        - name: Change the Node Disk operator Image
                          replace:
                            path: "{{ openebs_operator }}"
                            regexp: openebs/node-disk-operator:ci
                            replace: openebs/node-disk-operator:{{ ndm_tag }}

                        - name: Change the OpenEBS component labels to desired version in Operator yaml
                          replace:
                            path: "{{ openebs_operator }}"
                            regexp: 'openebs.io/version: dev'
                            replace: "openebs.io/version: {{ release_version }}"

                        - name: Change the Image tag to newer version in operator yaml
                          replace:
                            path: "{{ openebs_operator }}"
                            regexp: ':ci'
                            replace: ":{{ release_version }}"

                      when: "'OK' not in new_operator.msg"

                  when: "'OK' not in operator_file.msg"

                - name: Applying openebs operator
                  shell: kubectl apply -f {{ openebs_operator }}
                  args:
                    executable: /bin/bash
                  ignore_errors: true

              when: deploy_type == "operator"

            - block:

                - name: Install helm client
                  shell: curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash
                  args:
                    executable: /bin/bash
                  register: output
                  until: "'installed' in output.stdout"
                  delay: 30
                  retries: 5

                - name: Setting up tiller.
                  shell: helm init --upgrade
                  args:
                    executable: /bin/bash
                  register: tiller_out

                - name: Checking if the tiller pod is created.
                  shell: helm version
                  args:
                    executable: /bin/bash
                  register: tiller_version
                  until: "'Server: &version.Version' in tiller_version.stdout"
                  delay: 30
                  retries: 30

                - name: Checking if the tiller service account already exists.
                  shell: kubectl get sa tiller -n kube-system
                  args:
                    executable: /bin/bash
                  register: sa
                  until: "'tiller' in sa.stdout"
                  delay: 20
                  retries: 2
                  ignore_errors: True

                - name: Creating the service account
                  shell: kubectl create serviceaccount --namespace kube-system tiller | echo $?
                  args:
                    executable: /bin/bash
                  register: tiller
                  until: "'0' in tiller.stdout"
                  delay: 30
                  retries: 5
                  when: "'tiller' not in sa.stdout"

                - name: Checking if the tiller cluster role binding already exists.
                  shell: kubectl get clusterrolebinding tiller
                  args:
                    executable: /bin/bash
                  register: cr
                  until: "'tiller' in cr.stdout"
                  delay: 10
                  retries: 2
                  ignore_errors: True

                - name: Creating the cluster rolebinding.
                  shell: |
                    kubectl create clusterrolebinding tiller --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
                    kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'
                  args:
                    executable: /bin/bash
                  when: "'tiller' not in cr.stdout"

                - name: Installing openebs using stable charts.
                  shell: >
                    helm install --namespace {{ operator_ns }} --name openebs stable/openebs --version {{ release_version }}
                  args:
                    executable: /bin/bash
                  register: openebs_out
                  until: "'The OpenEBS has been installed' in openebs_out.stdout"
                  delay: 5
                  retries: 5

              when: deploy_type == "helm"

            - name: Obtain the service account name
              shell: kubectl get deploy -n {{ operator_ns }} -l name=maya-apiserver -o jsonpath="{.items[*].spec.template.spec.serviceAccount}"
              register: service_account
              failed_when: 'service_account.stdout == ""'

            - name: Verify that rolling update of maya-apiserver is completed
              shell: >
                kubectl get pods --no-headers -n {{ operator_ns }}
                -l name=maya-apiserver | wc -l
              args:
                executable: /bin/bash
              register: maya_count
              until: "maya_count.stdout == '1'"
              delay: 5
              retries: 120

            - name: Set the openebs api server container name
              set_fact:
                container_name: "openebs-apiserver"
              when: deploy_type == 'helm'

            - name: Set the maya api server containe name
              set_fact:
                container_name: "maya-apiserver"
              when: deploy_type == 'operator'

            - name: Check if the  Maya-API-Server container status
              shell: >
                kubectl get pods --no-headers -n {{ operator_ns }} -l name=maya-apiserver
                -o jsonpath='{.items[?(@.status.containerStatuses[*].name=="{{ container_name }}")].status.containerStatuses[*].ready}'
              register: maya_api
              until: "maya_api.stdout == 'true'"
              delay: 5
              retries: 120

            - name: Check if the  OpenEBS-provisioner is running
              shell: >
                kubectl get pods -n {{ operator_ns }}
                -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-provisioner")].status.phase}'
              register: openebs_prob
              until: "'Running' in openebs_prob.stdout"
              delay: 5
              retries: 120

            - name: Check if the  OpenEBS-admission-server is running
              shell: >
                kubectl get pods -n {{ operator_ns }}
                -o jsonpath='{.items[?(@.metadata.labels.app=="admission-webhook")].status.phase}'
              register: admission_web
              until: "'Running' in admission_web.stdout"
              delay: 5
              retries: 120

            - name: Check if the  OpenEBS-Snapshot-Operator is running
              shell: >
                kubectl get pods -n {{ operator_ns }}
                -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-snapshot-operator")].status.phase}'
              register: oso
              until: "'Running' in oso.stdout"
              delay: 5
              retries: 120

            - name: Check if the  OpenEBS-ndm-Operator is running
              shell: >
                kubectl get pods -n {{ operator_ns }}
                -o jsonpath='{.items[?(@.metadata.labels.openebs\.io\/component-name=="ndm-operator")].status.phase}'
              register: ndm_operator
              until: "'Running' in ndm_operator.stdout"
              delay: 5
              retries: 120

            - name: Check if the  OpenEBS-localpv-provisioner is running
              shell: >
                kubectl get pods -n {{ operator_ns }}
                -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-localpv-provisioner")].status.phase}'
              register: local_pv
              until: "'Running' in local_pv.stdout"
              delay: 5
              retries: 120

            - name: Check if the  OpenEBS NDM daemonset pods are running
              shell: >
                kubectl get pods -n {{ operator_ns }} -l openebs.io/component-name=ndm-operator -o custom-columns=:.status.phase --no-headers
              register: ndm_dm
              until: "((ndm_dm.stdout_lines|unique)|length) == 1 and 'Running' in ndm_dm.stdout"
              delay: 5
              retries: 120

          when: lookup('env','ACTION') == "provision"

        - block:

            - name: Downloading openebs-operator.yaml
              get_url:
                url: "{{ openebs_operator_link }}"
                dest: "{{ playbook_dir }}/{{ openebs_operator }}"
                force: yes
              register: result
              until:  "'OK' in result.msg"
              delay: 5
              retries: 3

            - name: Cleaning openebs operator
              shell: kubectl delete -f {{ openebs_operator }}
              args:
                executable: /bin/bash
              ignore_errors: True

            - name: Confirm pods has been deleted
              shell: kubectl get pods -n {{ operator_ns }}
              args:
                executable: /bin/bash
              register: result
              until: 'item not in result.stdout'
              with_items:
                - "maya-apiserver"
                - "openebs-provisioner"
                - "openebs-snapshot-operator"
                - "openebs-ndm-operator"
                - "openebs-admission-server"
                - "openebs-localpv-provisioner"
                - "openebs-ndm"
              delay: 30
              retries: 100

            - name: Confirm that namespace has been deleted
              shell: kubectl get namespaces
              args:
                executable: /bin/bash
              register: result
              until: 'operator_ns not in result.stdout'
              delay: 30
              retries: 100

          when: lookup('env','ACTION') == "deprovision"

        - set_fact:
            flag: "Pass"

      rescue:
          - set_fact:
              flag: "Fail"

      always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR
          - include_tasks: /utils/fcm/update_e2e_result_resource.yml
            vars:
              status: 'EOT'
