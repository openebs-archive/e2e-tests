# TODO 
# Apply storage pool and storage class

- hosts: localhost
  connection: local

  vars_files:
  - vars.yaml

  tasks:
    - block:
          - block:
            ## RECORD START of e2e job
            - name: Record test instance/run ID
              set_fact:
                run_id: "{{ lookup('env','RUN_ID') }}"
            - name: Construct testname appended with runID
              set_fact:
                test_name: "{{ installation_test_name }}-{{ run_id }}"
            when: lookup('env','RUN_ID')

          - name: Generate the e2e result CR to reflect Start of Installation
            template:
              src: /e2e-result.j2
              dest: e2e-result.yaml
            vars:
              test: "{{ installation_test_name }}"
              chaostype: ""
              app: ""
              phase: in-progress
              verdict: none

          - name: Analyze the cr yaml
            shell: cat e2e-result.yaml

          - name: Apply the e2e result CR
            shell: kubectl apply -f e2e-result.yaml
            args:
              executable: /bin/bash
            register: lr_status
            failed_when: "lr_status.rc != 0"

          - template:
              src: storageclass-memcheck.j2
              dest: "{{ storage_class_memcheck }}"

          - name: Applying storage class
            shell: "{{ kubeapply }} apply -f {{ storage_class_memcheck }}" 
            args:
              executable: /bin/bash

          - name: Confirm that openebs storage classes are created
            shell: kubectl get storageclass
            args:
              executable: /bin/bash
            register: result_sc
            until: "'cstor-memcheck' in result_sc.stdout"
            delay: 30
            retries: 3

          - template:
              src: cstor-xfs.j2
              dest: "{{ storage_class_xfs }}"

          - name: Applying storage class
            shell: "{{ kubeapply }} apply -f {{ storage_class_xfs }}" 
            args:
              executable: /bin/bash

          - name: Confirm that openebs storage classes are created
            shell: kubectl get storageclass
            args:
              executable: /bin/bash
            register: result_xfs
            until: "'cstor-xfs' in result_xfs.stdout"
            delay: 30
            retries: 3

          - block:
              - template:
                  src: storageclass-jiva.j2
                  dest: "{{ storage_class_jiva }}"

              - name: Applying storage class
                shell: "{{ kubeapply }} apply -f {{ storage_class_jiva }}" 
                args:
                  executable: /bin/bash
              
              - name: Confirm that openebs storage pools are created
                shell: kubectl get storagepool
                args:
                  executable: /bin/bash
                register: result_sp
                until: "lookup('env','JIVA_POOL_NAME') in result_sp.stdout"
                delay: 30
                retries: 100

              - name: Confirm that openebs storage classes are created
                shell: kubectl get storageclass
                args:
                  executable: /bin/bash
                register: result_sc
                until: "lookup('env','JIVA_STORAGECLASS_NAME') in result_sc.stdout"
                delay: 30
                retries: 100 
            when: lookup('env','APPLY_JIVA') == "true"

          - block:
              - template:
                  src: storageclass-cstor.j2
                  dest: "{{ storage_class_cstor }}"

              - name: Add the disks to the pool
                lineinfile:
                  path: "{{ storage_class_cstor }}"
                  insertafter: 'diskList:'
                  line: '     - {{ item }}'
                with_items: "{{ lookup('env','DISK_LIST').split(\",\") }}"

              - name: Applying storage class
                shell: "{{ kubeapply }} apply -f {{ storage_class_cstor }}" 
                args:
                  executable: /bin/bash
              
              - name: Confirm that openebs storage pools are created
                shell: kubectl get storagepool
                args:
                  executable: /bin/bash
                register: result_sp
                until: "lookup('env','CSTOR_POOL_NAME') in result_sp.stdout"
                delay: 30
                retries: 100

              - name: Confirm that openebs storage classes are created
                shell: kubectl get storageclass
                args:
                  executable: /bin/bash
                register: result_sc
                until: "lookup('env','CSTOR_STORAGECLASS_NAME') in result_sc.stdout"
                delay: 30
                retries: 100 
            when: lookup('env','APPLY_CSTOR') == "true"

          - set_fact:
              flag: "Pass"
      rescue: 
        - set_fact:
            flag: "Fail"

      always:
        ## Updating status to CR
        - name: Generate the e2e result CR to reflect End Of Installation
          template:
            src: /e2e-result.j2
            dest: e2e-result.yaml
          vars:
            test: "{{ installation_test_name }}"
            chaostype: ""
            app: ""
            phase: completed
            verdict: "{{ flag }}"

        - name: Analyze the cr yaml
          shell: cat e2e-result.yaml
          

        - name: Apply the e2e result CR
          shell: kubectl apply -f e2e-result.yaml
          args:
            executable: /bin/bash
          register: lr_status
          failed_when: "lr_status.rc != 0"
