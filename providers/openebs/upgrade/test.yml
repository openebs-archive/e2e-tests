---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:
    - block:

         ## Generating the testname for deployment
        - include_tasks: /utils/fcm/create_testname.yml

         ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: "/utils/fcm/update_e2e_result_resource.yml"
          vars:
            status: 'SOT'

        - name: Obtain the service account name
          shell: kubectl get deploy -n {{ operator_ns }} -l name=maya-apiserver -o jsonpath="{.items[*].spec.template.spec.serviceAccount}"
          register: service_account
          failed_when: 'service_account.stdout == ""'

        - block:
                
            - name: Check if the maya api server is running with expected version
              shell: >
                kubectl get pods -n {{ operator_ns }}
                -o jsonpath='{.items[?(@.metadata.labels.name=="maya-apiserver")].metadata.labels.openebs\.io\/version}'
              register: new_maya
              failed_when: "new_maya.stdout != old_version"

            - name: Check if the  OpenEBS-provisioner running with expected version
              shell: >
                kubectl get pods -n {{ operator_ns }}
                -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-provisioner")].metadata.labels.openebs\.io\/version}'
              register: openebs_prov_version
              failed_when: "openebs_prov_version.stdout != old_version"

            - name: Check if the  OpenEBS-admission-server running with expected version
              shell: >
                kubectl get pods -n {{ operator_ns }}
                -o jsonpath='{.items[?(@.metadata.labels.app=="admission-webhook")].metadata.labels.openebs\.io\/version}'
              register: admission_web_version
              failed_when: "admission_web_version.stdout != old_version"

            - name: Check if the  OpenEBS-Snapshot-Operator running with expected version
              shell: >
                kubectl get pods -n {{ operator_ns }}
                -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-snapshot-operator")].metadata.labels.openebs\.io\/version}'
              register: oso_version
              failed_when: "oso_version.stdout != old_version"

            - name: Check if the  OpenEBS-ndm-Operator running with expected version
              shell: >
                kubectl get pods -n {{ operator_ns }}
                -o jsonpath='{.items[?(@.metadata.labels.openebs\.io\/component-name=="ndm-operator")].metadata.labels.openebs\.io\/version}'
              register: ndm_operator_version
              failed_when: "ndm_operator_version.stdout != old_version"

            - name: Check if the  OpenEBS-localpv-provisioner running with expected version
              shell: >
                kubectl get pods -n {{ operator_ns }}
                -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-localpv-provisioner")].metadata.labels.openebs\.io\/version}'
              register: local_pv_version
              failed_when: "local_pv_version.stdout != old_version"

            - name: Obtain the Node Disk Manager image
              shell: >
                kubectl get ds -n {{ operator_ns }} -l openebs.io/component-name=ndm
                -o custom-columns=:.spec.template.spec.containers[].image --no-headers
              register: ndm_tag
              failed_when: 'ndm_tag.stdout == ""'

            - name: Obtain the Node Disk Manager daemonset current count
              shell: >
                kubectl get ds -n {{ operator_ns }}
                -o jsonpath='{.items[?(@.metadata.labels.openebs\.io\/component-name=="ndm")].status.currentNumberScheduled}'
              register: ndm_current_count
              failed_when: 'ndm_current_count.stdout == ""'

            - name: Obtain the Node Disk Manager daemonset desired count
              shell: >
                kubectl get ds -n {{ operator_ns }}
                -o jsonpath='{.items[?(@.metadata.labels.openebs\.io\/component-name=="ndm")].status.desiredNumberScheduled}'
              register: ndm_desired_count
              failed_when: "{{ ndm_desired_count.stdout }} != {{ ndm_current_count.stdout }}"

            - block:
                  ## Obtaining the OpenEBS operator from charts.
                  ## If the chart is not created, openebs operator will be downloaded from master branch.
                - name: Downloading openebs-operator.yaml
                  get_url:
                    url: "{{ new_operator }}"
                    dest: "{{ playbook_dir }}/{{ openebs_operator }}"
                    force: yes
                  register: new_operator_file
                  ignore_errors: true
                  until:  "'OK' in new_operator_file.msg"
                  delay: 5
                  retries: 3

                - block:

                    - name: Downloading openebs-operator.yaml
                      get_url:
                        url: "{{ openebs_operator_link }}"
                        dest: "{{ playbook_dir }}/{{ openebs_operator }}"
                        force: yes
                      register: result
                      until:  "'OK' in result.msg"
                      delay: 5
                      retries: 3

                    - name: Change the Node Disk manager Image
                      replace:
                        path: "{{ openebs_operator }}"
                        regexp: quay.io/openebs/node-disk-manager-amd64:ci
                        replace: quay.io/openebs/node-disk-manager-amd64:{{ new_ndm_tag }}

                    - name: Change the Node Disk operator Image
                      replace:
                        path: "{{ openebs_operator }}"
                        regexp: quay.io/openebs/node-disk-operator-amd64:ci
                        replace: quay.io/openebs/node-disk-operator-amd64:{{ new_ndm_tag }}

                    - name: Change the OpenEBS component labels to desired version in Operator yaml
                      replace:
                        path: "{{ openebs_operator }}"
                        regexp: 'openebs.io/version: dev'
                        replace: "openebs.io/version: {{ new_version }}"

                    - name: Change the Image tag to newer version in operator yaml
                      replace:
                        path: "{{ openebs_operator }}"
                        regexp: ':ci'
                        replace: ":{{ new_version }}"
                      when: upgrade_to_ci == ""

                    - name: Change the Image tag to newer version in operator yaml
                      replace:
                        path: "{{ openebs_operator }}"
                        regexp: ':ci'
                        replace: ":{{ upgrade_to_ci }}"
                      when: upgrade_to_ci != ""

                  when: "'OK' not in new_operator_file.msg"

                - name: Upgrade openebs control plane components
                  shell: kubectl --kubeconfig /root/admin.conf apply -f "{{ openebs_operator }}"
                  args:
                    executable: /bin/bash
                  ignore_errors: true

              when:  deploy_type == "operator"

            - block:

                - set_fact:
                     helm_repo: "openebs/openebs"
                  when: helm_repo is undefined

                - set_fact:
                     helm_branch: "master"
                  when: helm_branch is undefined

                - name: Upgrade openebs control plane components
                  shell: git clone -b {{ helm_branch }} https://github.com/{{ helm_repo }}
                  args:
                    executable: /bin/bash
                  ignore_errors: true

                - name: Install helm client
                  shell: curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash
                  args:
                    executable: /bin/bash
                  register: output
                  until: "'installed' in output.stdout"
                  delay: 30
                  retries: 5

                - name: Setting up tiller.
                  shell: helm init
                  args:
                    executable: /bin/bash
                  register: tiller_out

                - name: Checking if the tiller pod is created.
                  shell: helm version
                  args:
                    executable: /bin/bash
                  register: tiller_version
                  until: "'Server: &version.Version' in tiller_version.stdout"
                  delay: 30
                  retries: 30

                - name: Checking if the tiller service account already exists.
                  shell: kubectl get sa tiller -n kube-system
                  args:
                    executable: /bin/bash
                  register: sa
                  until: "'tiller' in sa.stdout"
                  delay: 20
                  retries: 2
                  ignore_errors: True

                - name: Creating the service account
                  shell: kubectl create serviceaccount --namespace kube-system tiller | echo $?
                  args:
                    executable: /bin/bash
                  register: tiller
                  until: "'0' in tiller.stdout"
                  delay: 30
                  retries: 5
                  when: "'tiller' not in sa"

                - name: Checking if the tiller cluster role binding already exists.
                  shell: kubectl get clusterrolebinding tiller
                  args:
                    executable: /bin/bash
                  register: cr
                  until: "'tiller' in cr.stdout"
                  delay: 10
                  retries: 2
                  ignore_errors: True

                - name: Creating the cluster rolebinding.
                  shell: |
                    kubectl create clusterrolebinding tiller --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
                    kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'
                  args:
                    executable: /bin/bash
                  when: "'tiller' not in cr"

                - name: Creating the cluster rolebinding.
                  shell: helm ls | grep openebs | head -1 | awk {'print $1'}
                  args:
                    executable: /bin/bash
                  register: chart_name

                - name: Upgrade openebs control plane components
                  shell: cd charts/stable/openebs && helm upgrade --namespace {{ operator_ns }} {{ chart_name.stdout }} .
                  args:
                    executable: /bin/bash

              when:  deploy_type == "helm"

          when: upgrade_control_plane == "true"

        - name: Verify that rolling update of maya-apiserver is completed
          shell: >
            kubectl get pods --no-headers -n {{ operator_ns }}
            -l name=maya-apiserver | wc -l
          args:
            executable: /bin/bash
          register: maya_count
          until: "maya_count.stdout == '1'"
          delay: 5
          retries: 120

        - name: Check the status of pod
          set_fact:
             container_name: "openebs-apiserver"
          when: deploy_type == 'helm'

        - name: Check the status of pod
          set_fact:
             container_name: "maya-apiserver"
          when: deploy_type == 'operator'

        - name: Check if the  Maya-API-Server container status
          shell: >
            kubectl get pods --no-headers -n {{ operator_ns }} -l name=maya-apiserver
            -o jsonpath='{.items[?(@.status.containerStatuses[*].name=="{{ container_name }}")].status.containerStatuses[*].ready}'
          register: maya_api
          until: "maya_api.stdout == 'true'"
          delay: 5
          retries: 120

        - name: Check if the  OpenEBS-provisioner is running
          shell: >
            kubectl get pods -n {{ operator_ns }}
            -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-provisioner")].status.phase}'
          register: openebs_prob
          until: "'Running' in openebs_prob.stdout"
          delay: 5
          retries: 120

        - name: Check if the  OpenEBS-admission-server is running
          shell: >
            kubectl get pods -n {{ operator_ns }}
            -o jsonpath='{.items[?(@.metadata.labels.app=="admission-webhook")].status.phase}'
          register: admission_web
          until: "'Running' in admission_web.stdout"
          delay: 5
          retries: 120

        - name: Check if the  OpenEBS-Snapshot-Operator is running
          shell: >
            kubectl get pods -n {{ operator_ns }}
            -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-snapshot-operator")].status.phase}'
          register: oso
          until: "'Running' in oso.stdout"
          delay: 5
          retries: 120

        - name: Check if the  OpenEBS-ndm-Operator is running
          shell: >
            kubectl get pods -n {{ operator_ns }}
            -o jsonpath='{.items[?(@.metadata.labels.openebs\.io\/component-name=="ndm-operator")].status.phase}'
          register: ndm_operator
          until: "'Running' in ndm_operator.stdout"
          delay: 5
          retries: 120

        - name: Check if the  OpenEBS-localpv-provisioner is running
          shell: >
             kubectl get pods -n {{ operator_ns }}
             -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-localpv-provisioner")].status.phase}'
          register: local_pv
          until: "'Running' in local_pv.stdout"
          delay: 5
          retries: 120

        - name: Check if the  OpenEBS NDM daemonset pods are running
          shell: >
             kubectl get pods -n {{ operator_ns }} -l openebs.io/component-name=ndm-operator -o custom-columns=:.status.phase --no-headers
          register: ndm_dm
          until: "((ndm_dm.stdout_lines|unique)|length) == 1 and 'Running' in ndm_dm.stdout"
          delay: 5
          retries: 120

        - name: Check if the maya api server is upgraded to newer version
          shell: >
            kubectl get pods -n {{ operator_ns }}
            -o jsonpath='{.items[?(@.metadata.labels.name=="maya-apiserver")].metadata.labels.openebs\.io\/version}'
          register: new_maya
          until: "new_maya.stdout == new_version"
          delay: 5
          retries: 12

        - name: Check if the OpenEBS-provisioner upgraded to newer version
          shell: >
             kubectl get pods -n {{ operator_ns }}
             -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-provisioner")].metadata.labels.openebs\.io\/version}'
          register: openebs_prov_version
          until: "openebs_prov_version.stdout == new_version"
          delay: 5
          retries: 12

        - name: Check if the OpenEBS-admission-server upgraded to newer version
          shell: >
            kubectl get pods -n {{ operator_ns }}
            -o jsonpath='{.items[?(@.metadata.labels.app=="admission-webhook")].metadata.labels.openebs\.io\/version}'
          register: admission_web_version
          until: "admission_web_version.stdout == new_version"
          delay: 5
          retries: 12

        - name: Check if the OpenEBS-Snapshot-Operator upgraded to newer version
          shell: >
            kubectl get pods -n {{ operator_ns }}
            -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-snapshot-operator")].metadata.labels.openebs\.io\/version}'
          register: oso_version
          until: "oso_version.stdout == new_version"
          delay: 5
          retries: 12

        - name: Check if the OpenEBS-ndm-Operator upgraded to newer version
          shell: >
            kubectl get pods -n {{ operator_ns }}
            -o jsonpath='{.items[?(@.metadata.labels.openebs\.io\/component-name=="ndm-operator")].metadata.labels.openebs\.io\/version}'
          register: ndm_operator_version
          until: "ndm_operator_version.stdout == new_version"
          delay: 5
          retries: 12

        - name: Check if the OpenEBS-localpv-provisioner upgraded to newer version
          shell: >
             kubectl get pods -n {{ operator_ns }}
             -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-localpv-provisioner")].metadata.labels.openebs\.io\/version}'
          register: local_pv_version
          until: "local_pv_version.stdout == new_version"
          delay: 5
          retries: 12

        - block:
            - name: Obtain the SPC name
              shell: kubectl get spc -o custom-columns=:.metadata.name --no-headers
              register: spc_name
              failed_when: 'spc_name.stdout == ""'

            - name: create job yaml spec for spc upgrade
              template:
                src: ./cstor-spc-upgrade-job.j2
                dest: ./cstor-spc-upgrade-job-{{ item }}.yml
              with_items:
                - "{{ spc_name.stdout_lines }}"

            - name: Replacing the spc name in upgrade SPC job spec
              replace:
                path: ./cstor-spc-upgrade-job-{{ item }}.yml
                regexp: "pool_name"
                replace: "{{ item }}"
              with_items:
                - "{{ spc_name.stdout_lines }}"

            - name: Replacing the service Account name in upgrade SPC job spec
              replace:
                path: ./cstor-spc-upgrade-job-{{ item }}.yml
                regexp: "service_account"
                replace: "{{ service_account.stdout }}"
              with_items:
                - "{{ spc_name.stdout_lines }}"

            - name: Replacing the service Account name in upgrade SPC job spec
              replace:
                path: ./cstor-spc-upgrade-job-{{ item }}.yml
                regexp: "service_account"
                replace: "{{ service_account.stdout }}"
              with_items:
                - "{{ spc_name.stdout_lines }}"

            - name: Adding imgae tag to upgrade the pools into SPC job spec
              lineinfile:
                path: ./cstor-spc-upgrade-job-{{ item }}.yml
                insertbefore: '--spc-name'
                line: '        - "--to-version-image-tag={{ upgrade_to_ci }}"'
              with_items:
                - "{{ spc_name.stdout_lines }}"
              when: upgrade_to_ci is defined

            - name: Create the job to upgrade the SPC pool
              shell: kubectl apply -f cstor-spc-upgrade-job-{{ item }}.yml
              args:
                executable: /bin/bash
              with_items:
                - "{{ spc_name.stdout_lines }}"

            - name: Check if the upgrade jobs been completed
              shell: >
                kubectl get pods -n {{ operator_ns }}
                -l job-name={{ item }} -o custom-columns=:.status.phase --no-headers
              register: job_status
              until: "'Succeeded' in job_status.stdout"
              delay: 10
              retries: 60
              with_items:
                - "{{ spc_name.stdout_lines }}"

            - name: Check if the SPC pool pods status
              shell: >
                kubectl get pods -n {{ operator_ns }}
                -l openebs.io/storage-pool-claim={{ item }} -o custom-columns=:.status.phase --no-headers
              register: pool_status
              until: "((pool_status.stdout_lines|unique)|length) == 1 and 'Running' in pool_status.stdout"
              retries: 30
              delay: 10
              with_items:
                 - "{{ spc_name.stdout_lines }}"

            - name: Check if the CSPs are in Healthy state
              shell: >
                kubectl get csp -l openebs.io/storage-pool-claim={{ item }}
                -o custom-columns=:.status.phase --no-headers --no-headers
              register: csp_status
              until: "((csp_status.stdout_lines|unique)|length) == 1 and 'Healthy' in csp_status.stdout"
              retries: 30
              delay: 10
              with_items:
                  - "{{ spc_name.stdout_lines }}"

            - name: Obtain the CSP name to check the version
              shell: >
                 kubectl get csp -l openebs.io/storage-pool-claim={{ item }}
                 -o=jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}'
              register: csp_name
              failed_when: 'csp_name.stdout == ""'
              with_items:
                  - "{{ spc_name.stdout_lines }}"

            - name: Initialize an empty list to store csp names
              set_fact:
                csp_list: []

            - name: Store name of all csp in the list
              set_fact:
                csp_list: "{{ csp_list + item.stdout_lines }}"
              with_items:
                - "{{ csp_name.results }}"

            - name: Check if the CSP resources are upgraded to newer version
              shell: kubectl get csp {{ item }} -o custom-columns=:.versionDetails.status.current --no-headers
              register: csp_version
              failed_when: "csp_version.stdout != new_version"
              with_items:
                  - "{{ csp_list }}"

            - name: Obtain the cStor PV name
              shell: kubectl get pv -l openebs.io/cas-type=cstor -o custom-columns=:.metadata.name --no-headers
              register: pv_name
              failed_when: 'pv_name.stdout == ""'

            - name: Upgrade cstor volumes
              include_tasks: cstor_volume_upgrade.yml
              with_items: "{{ pv_name.stdout_lines }}"
              loop_control:
                loop_var: outer_item

          when: upgrade_cstor == "true"

        - block:
            - name: Obtain the JIVA PV name
              shell: kubectl get pv -l openebs.io/cas-type=jiva -o custom-columns=:.metadata.name --no-headers
              register: jiva_pv_name
              failed_when: 'jiva_pv_name.stdout == ""'

            - name: Upgrade JIVA volumes
              include_tasks: jiva_volume_upgrade.yml
              with_items: "{{ jiva_pv_name.stdout_lines }}"
              loop_control:
                loop_var: outer_item

          when: upgrade_jiva == "true"

        - set_fact:
            flag: "Pass"

      rescue:
          - set_fact:
              flag: "Fail"

      always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR
          - include_tasks: /utils/fcm/update_e2e_result_resource.yml
            vars:
              status: 'EOT'
