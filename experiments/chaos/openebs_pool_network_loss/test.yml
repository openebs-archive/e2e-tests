---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml
    - /mnt/parameters.yml

  tasks:
    - block:

        - include_tasks: /utils/k8s/application_liveness_check.yml
          when: liveness_label != ''

        ## DERIVE THE APP STORAGE CLASS AND CHAOS UTIL TO USE

        - include: test_prerequisites.yml

        - include_vars:
            file: data_persistence.yml

        - name: Record the data consistency util path
          set_fact:
            data_consistency_util_path: "{{ consistencyutil }}"
          when: data_persistence != ''

        ## RECORD START-OF-TEST IN LITMUS RESULT CR

        - include_tasks: /utils/fcm/create_testname.yml

        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'SOT'
            chaostype: "{{ test_name }}"

        ## DISPLAY APP INFORMATION

        - name: Display the app information passed via the test job
          debug:
            msg:
              - "The application info is as follows:"
              - "Namespace    : {{ namespace }}"
              - "Label        : {{ label }}"
              - "PVC          : {{ pvc }}"
              - "StorageClass : {{ sc }}"

        ## PRE-CHAOS APPLICATION LIVENESS CHECK
        - name: Verify that the AUT (Application Under Test) is running
          include_tasks: "/utils/k8s/status_app_pod.yml"
          vars:
            app_ns: "{{namespace}}"
            app_lkey: "{{ label.split('=')[0] }}"
            app_lvalue: "{{ label.split('=')[1] }}"
            delay: 5
            retries: 60

        - name: Get application pod name
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ label }} --no-headers
            -o=custom-columns=NAME:".metadata.name"
          args:
            executable: /bin/bash
          register: app_pod_name

        - name: Create some test data
          include: "{{ data_consistency_util_path }}"
          vars:
            status: 'LOAD'
            ns: "{{ namespace }}"
            pod_name: "{{ app_pod_name.stdout }}"
          when: data_persistence != ''

        - name: Derive PV from application PVC
          shell: >
            kubectl get pvc {{ pvc }}
            -o custom-columns=:spec.volumeName -n {{ namespace }}
            --no-headers
          args:
            executable: /bin/bash
          register: pv

        - name: Pick a cStor target pod belonging to the PV
          shell: >
            kubectl get pods -n {{ openebs_ns }} -l openebs.io/persistent-volume={{ pv.stdout }}
            --no-headers -o custom-columns=:metadata.name
          args:
            executable: /bin/bash
          register: cstor_target_pod

        - name: Obtain the list of pool pods
          shell: >
            kubectl get pods -n {{ openebs_ns }} -l openebs.io/cstor-pool-cluster={{ cspc_name }}
            --no-headers -o custom-columns=:.metadata.name
          args:
            executable: /bin/bash
          register: pool_pods

        ## STORAGE FAULT INJECTION

        - include: "/chaoslib/{{ chaos_util_path }}"
          vars:
            operator_namespace: "{{ openebs_ns }}"
            status: induce
            target_pod: "{{ item }}"
            containername: cstor-pool
          with_items:
            - "{{ pool_pods.stdout_lines[0] }}"
            - "{{ pool_pods.stdout_lines[1] }}"

        - name: Kill the application pod
          shell: >
            kubectl delete pod {{ app_pod_name.stdout }} -n {{ namespace }}
          args:
            executable: /bin/bash
          register: pod_state
          failed_when: pod_state.rc != 0

        - name: Verify if the application pod is deleted
          shell: >
            kubectl get pods -n {{ namespace }}
          args:
            executable: /bin/bash
          register: podstatus
          until: '"{{ app_pod_name.stdout }}" not in podstatus.stdout'
          retries: 5
          delay: 100

        - include: "/chaoslib/{{ chaos_util_path }}"
          vars:
            operator_namespace: "{{ openebs_ns }}"
            status: remove
            target_pod: "{{ item }}"
            containername: cstor-pool
          with_items:
            - "{{ pool_pods.stdout_lines[0] }}"
            - "{{ pool_pods.stdout_lines[1] }}"

        ## POST-CHAOS APPLICATION LIVENESS CHECK

        - block:

            - name: Obtain the newly created pod name for application
              shell: >
                kubectl get pods -n {{ namespace }} -l {{ label }} -o jsonpath='{.items[].metadata.name}'
              args:
                executable: /bin/bash
              register: newpod_name

            - name: Checking application pod not in running state
              shell: kubectl get pods -n {{ namespace }} -o jsonpath='{.items[?(@.metadata.name=="{{ newpod_name.stdout }}")].status.containerStatuses[*].state}'
              args:
                executable: /bin/bash
              register: result
              until: "'running' not in result.stdout"
              delay: 5
              retries: 100
          when: stg_prov == 'openebs.io/provisioner-iscsi'

        - block:

            - name: Verify that the volume is healthy
              shell: >
                kubectl get cstorvolume {{ pv.stdout }} -n {{ openebs_ns }}
                --no-headers -o custom-columns=:.status.phase
              args:
                executable: /bin/bash
              register: Status
              until: "'Healthy' in Status.stdout"
              delay: 5
              retries: 60

            - name: Verify that the AUT (Application Under Test) is running
              include_tasks: "/utils/k8s/status_app_pod.yml"
              vars:
                app_ns: "{{namespace}}"
                app_lkey: "{{ label.split('=')[0] }}"
                app_lvalue: "{{ label.split('=')[1] }}"
                delay: 5
                retries: 60

            - name: Verify test data
              include: "{{ data_consistency_util_path }}"
              vars:
                status: 'VERIFY'
                ns: "{{ namespace }}"
                pod_name: "{{ app_pod_name.stdout }}"
              when: data_persistence != ''
          when: stg_prov == 'cstor.csi.openebs.io'

        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"

      always:

        ## RECORD END-OF-TEST IN LITMUS RESULT CR

        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'EOT'
            chaostype: "{{ test_name }}"
