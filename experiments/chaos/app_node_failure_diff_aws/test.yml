---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:

    - block:

        ## PRE-CHAOS APPLICATION LIVENESS CHECK
        - include_tasks: /utils/k8s/application_liveness_check.yml
          when: liveness_label != ''

        ## RECORD START OF THE TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/create_testname.yml

        - include_tasks: /chaoslib/aws_chaos/prerequisites_aws.yml
          when: lookup('env','PLATFORM') == 'AWS'

        - name: Check the status of nodes and have count of nodes
          shell: kubectl get nodes --no-headers | grep -v 'master'
          args:
            executable: /bin/bash
          register: pre_chaos_node_count

        ## RECORD START-OF-NODE-CHAOS TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'SOT'
            chaostype: "node-shutdown-up-diff-name"
            app: "percona"

        ## DISPLAY APP INFORMATION
        - name: Display the app information passed via the test job
          debug:
            msg:
              - "The application info is as follows:"
              - "Namespace    : {{ namespace }}"
              - "Label        : {{ label }}"

        ## Verify the APPLICATION UNDER TEST PRE CHAOS
        - include_tasks: /utils/k8s/status_app_pod.yml
          vars:
            app_ns: "{{ namespace }}"
            app_lkey: "{{ label.split('=')[0] }}"
            app_lvalue: "{{ label.split('=')[1] }}"
            delay: '2'
            retries: '60'


        ## Fetch app pod name
        - name: Get application pod name
          shell: >
            kubectl get po -n {{ namespace }} -l {{ label }} --no-headers -o=custom-columns=NAME:".metadata.name"
          args:
            executable: /bin/bash
          register: app_pod_name    

        ## Generate Database name
        - name: Generate some random name for database creation
          shell: >
              echo $(mktemp) | cut -d '.' -f 2
          args:
            executable: /bin/bash
          register: randstr

        ## Create Load for testing
        - name: Create test load in the mysql database
          include_tasks: /utils/scm/applications/mysql/mysql_data_persistence.yml
          vars:
            status: 'LOAD'
            ns: "{{ namespace }}"
            pod_name: "{{ app_pod_name.stdout }}"
            dbuser: 'root'
            dbpassword: 'k8sDem0'
            dbname: "tdb{{ randstr.stdout }}"
          when: data_persistance != ''

        ## Node Failure Chaos
        - name: Get Application pod Node to perform chaos
          shell: >
            kubectl get pod {{ app_pod_name.stdout }} -n {{ namespace }}
            --no-headers -o custom-columns=:spec.nodeName
          args:
            executable: /bin/bash
          register: app_node

          ## Fetch the AWS instance details(instance_id, region)
        - include_tasks: /utils/scm/cloud/aws/fetch_aws_details.yml
          vars:
            instance_name: "{{ app_node.stdout }}"
          when: lookup('env', 'PLATFORM') == 'AWS'

        ## Execute the chaos util
        - include_tasks: /chaoslib/aws_chaos/chaosutil_aws.yml
          when: lookup('env', 'PLATFORM') == 'AWS'

        - include_tasks: /utils/k8s/check_no_of_nodes.yml
          vars:
            post_chaos_soak_time: '40'
            injected_node_chaos: "yes"
            delay: '5'
            retries: '80'

        ## Application verification after the POST chaos
        - include_tasks: /utils/k8s/status_app_pod.yml
          vars:
            app_ns: "{{ namespace }}"
            app_lkey: "{{ label.split('=')[0] }}"
            app_lvalue: "{{ label.split('=')[1] }}"
            delay: '2'
            retries: '150'

        ## POST-CHAOS APPLICATION LIVENESS CHECK
        - include_tasks: /utils/k8s/application_liveness_check.yml
          when: liveness_label != ''

        - name: Get application pod name
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ label }} --no-headers
            -o=custom-columns=NAME:".metadata.name"
          args:
            executable: /bin/bash
          register: rescheduled_app_pod

        - name: Verify mysql data persistence
          include_tasks: "/utils/scm/applications/mysql/mysql_data_persistence.yml"
          vars:
            status: 'VERIFY'
            ns: "{{ namespace }}"
            pod_name: "{{ rescheduled_app_pod.stdout }}"
            dbuser: 'root'
            dbpassword: 'k8sDem0'
            dbname: "tdb{{ randstr.stdout }}"
          when: data_persistance != ''

        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"

      always:
        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'EOT'
            chaostype: "node-shutdown-up-diff-name"
            app: "percona"

        - include_tasks: /utils/k8s/check_no_of_nodes.yml
          vars:
            injected_node_chaos: "no"
            delay: '5'
            retries: '80'

        - include_tasks: /chaoslib/openebs/cstor_pool_health_check.yml
          vars:
              post_chaos_soak_time: '0'
              app_ns: "{{ namespace }}"
              app_pvc: "{{ pvc }}"
              error_messages: "{{ pool_debug_msg }}"
