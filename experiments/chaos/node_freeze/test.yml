---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:
    - block:

        - include_tasks: /utils/k8s/application_liveness_check.yml
          when: liveness_label != ''

         ## RECORD START OF THE TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/create_testname.yml

        - include_tasks: /chaoslib/aws_chaos/prerequisites_aws.yml
          when: lookup('env','PLATFORM') == 'AWS'

        # RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: "/utils/fcm/update_e2e_result_resource.yml"
          vars:
            status: 'SOT'
            chaostype: "{{test_name}}"
            app: "percona" 
            

        # DISPLAY APP INFORMATION

        - name: Display the app information passed via the test job
          debug:
            msg:
              - "The application info is as follows:"
              - "Namespace    : {{ namespace }}"
              - "Label        : {{ app_label }}"

        - name: Verify that the AUT (Application Under Test) is running
          include_tasks: "/utils/k8s/status_app_pod.yml"
          vars:
            app_ns: "{{namespace}}"
            app_lkey: "{{ app_label.split('=')[0] }}"
            app_lvalue: "{{ app_label.split('=')[1] }}"
            delay: 5
            retries: 60

        - name: Get application pod name
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ app_label }} --no-headers
            -o=custom-columns=NAME:".metadata.name"
          args:
            executable: /bin/bash
          register: app_pod_name

        - name: Generate unique string for use in dbname
          shell: echo $(mktemp) | cut -d '.' -f 2
          args:
            executable: /bin/bash
          register: uniqstr

        - name: Create some test data in the mysql database
          include_tasks: "/utils/scm/applications/mysql/mysql_data_persistence.yml"
          vars:
            status: 'LOAD'
            ns: "{{ namespace }}"
            pod_name: "{{ app_pod_name.stdout }}"
            dbuser: 'root'
            dbpassword: 'k8sDem0'
            dbname: "tdb{{ uniqstr.stdout }}"
          when: data_persistance != ''

        ## STORAGE FAULT INJECTION

        - include_tasks: /chaoslib/chaoskube/node_freeze_chaos.yml
          vars:
            action: "node-chaos"
            app_pod: "{{app_pod_name.stdout}}"
            application_label: "{{app_label}}"
            docker_image: "{{ freeze_image }}"
            nodeaction: "{{ node_freeze_action }}"
            platform: "{{ test_bed }}"
            app_ns: "{{ namespace }}"

        - name: Display application details from above utils.
          debug:
            msg:
              - "APPLICATION_NODE_NAME    : {{ app_node }}"

        - name: wait for app pod to reschedule
          shell: >
            sleep {{ f_duration | int + 100 }}
          args:
            executable: /bin/bash

        - name: Verify that the AUT (Application Under Test) is running after post chaos.
          include_tasks: "/utils/k8s/status_app_pod.yml"
          vars:
            app_ns: "{{namespace}}"
            app_lkey: "{{ app_label.split('=')[0] }}"
            app_lvalue: "{{ app_label.split('=')[1] }}"
            delay: 5
            retries: 60

        - include_tasks: /utils/k8s/application_liveness_check.yml
          when: liveness_label != ''

        - name: Get application pod name
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ app_label }} --no-headers
            -o=custom-columns=NAME:".metadata.name"
          args:
            executable: /bin/bash
          register: rescheduled_app_pod

        - name: Verify mysql data persistence
          include_tasks: "/utils/scm/applications/mysql/mysql_data_persistence.yml"
          vars:
            status: 'VERIFY'
            ns: "{{ namespace }}"
            pod_name: "{{ rescheduled_app_pod.stdout }}"
            dbuser: 'root'
            dbpassword: 'k8sDem0'
            dbname: "tdb{{ uniqstr.stdout }}"
          when: data_persistance != ''

        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"

      always:

        - block:

            ## Fetch the AWS instance details(instance_id, region)
            - include_tasks: /utils/scm/cloud/aws/fetch_aws_details.yml
              vars:
                instance_name: "{{ app_node }}"

            # Execute the chaos util
            - include_tasks: /chaoslib/aws_chaos/chaosutil_aws.yml
              vars:
                action: "restarted"

            # wait for some time and check node status

            - name: wait after node restarted.
              shell: >
                  sleep {{ f_duration }}
              args:
                executable: /bin/bash

            - name: Check the node status after node restarted.
              shell: kubectl get node {{ app_node }} --no-headers | awk '{print $2}'
              args:
                executable: /bin/bash
              register: node_status
              until: "'Ready' in node_status.stdout"
              delay: 5
              retries: 60

            - include_tasks: /chaoslib/chaoskube/node_freeze_chaos.yml
              vars:
                action: "node_chaos_delete"
                app_ns: "{{ namespace }}"

          when: lookup('env', 'PLATFORM') == 'AWS'

        # RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: "/utils/fcm/update_e2e_result_resource.yml"
          vars:
            status: 'EOT'

