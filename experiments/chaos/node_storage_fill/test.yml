---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:
    - block:

          ## RECORD START-OF-TEST IN LITMUS RESULT CR

        - include_tasks: /utils/fcm/create_testname.yml

        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'SOT'
            chaostype: "{{ test_name }}"

        ## DISPLAY APP INFORMATION 
 
        - name: Display the app information passed via the test job
          debug: 
            msg: 
              - "The application info is as follows:"
              - "Namespace    : {{ app_ns }}"
              - "Storage pool claim : {{ spc }}"  
  
        - name: Obtaining the CSP name using SPC label and randomly picking one
          shell: >
            kubectl get csp --no-headers -l openebs.io/storage-pool-claim={{ spc }} 
            -o custom-columns=:.metadata.name | shuf -n 1
          args:
            executable: /bin/bash
          register: csp_name

        - name: Obtaining pool pod corresponding to the above csp
          shell: >
            kubectl get pods -n {{ operator_ns }} -l openebs.io/cstor-pool={{ csp_name.stdout }} 
            --no-headers -o custom-columns=:.metadata.name
          args:
            executable: /bin/bash
          register: pool_pod

        - name: Obtaining node name where the above pool pod is scheduled
          shell: >
            kubectl get pods {{ pool_pod.stdout }} -n {{ operator_ns }} --no-headers 
            -o wide -o custom-columns=:.spec.nodeName
          args:
            executable: /bin/bash
          register: node_name

        - name: Replace the node name placeholder in rogue pod spec
          replace:
            path: busybox_deployment.yml
            regexp: "k8shostname"
            replace: "{{ node_name.stdout }}"

        - name: Replace the storage class placeholder in rogue pod spec
          replace:
            path: busybox_deployment.yml
            regexp: "k8sstorageclass"
            replace: "{{ storage_class }}"

        - include_tasks: /utils/k8s/create_ns.yml

        - name: Deploy rogue busybox application
          shell: >
            kubectl apply -f busybox_deployment.yml -n {{ app_ns }}
          args:
            executable: /bin/bash

        - name: Ensure that the rogue pod is running
          shell: >
            kubectl get pods -n {{ app_ns }} --no-headers -l app=rogue-busybox 
            -o custom-columns=:.status.phase
          args:
            executable: /bin/bash
          register: pod_status
          until: "'Running' in pod_status.stdout"
          delay: 10
          retries: 30

        - name: Obtain the rogue application name
          shell: >
            kubectl get pods -n {{ app_ns }} -l app=rogue-busybox --no-headers 
            -o custom-columns=:.metadata.name
          args:
            executable: /bin/bash
          register: rogue_pod

        - name: Fill the root directory of rogue pod using fallocate.
          shell: > 
            kubectl exec -ti {{ rogue_pod.stdout }} -n {{ app_ns }} -- fallocate 
            -l 50G /test.img
          args:
            executable: /bin/bash
          ignore_errors: yes

        - name: Ensure that the application pod is evicted
          shell: > 
            kubectl get pods {{ rogue_pod.stdout }} -n {{ app_ns }} 
            --no-headers -o custom-columns=:.status.reason
          args:
            executable: /bin/bash
          register: status
          until: "'Evicted' in status.stdout"
          delay: 10
          retries: 30

        - name: Check if the pool pod is running.
          shell: >
            kubectl get pods {{ pool_pod.stdout }} -n {{ operator_ns }} --no-headers 
            -o custom-columns=:.status.phase
          args:
            executable: /bin/bash
          register: pool_status
          failed_when: "'Running' not in pool_status.stdout"

        - name: Delete rogue busybox application
          shell: >
            kubectl delete -f busybox_deployment.yml -n {{ app_ns }}
          args:
            executable: /bin/bash

        - set_fact:
            flag: "Pass"

      rescue: 
        - set_fact: 
            flag: "Fail"

      always: 
         ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'EOT'
