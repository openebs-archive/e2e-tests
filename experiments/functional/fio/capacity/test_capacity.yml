---
## PRE-CONDITION THE APPLICATION DEPLOYMENT SPECS WITH TEST PARAMS

- name: Replace the app node placeholder with perf-intensive node
  replace:
    path: "{{ pod_yaml_alias }}"
    regexp: "testNode"
    replace: "{{ lookup('env','APP_NODE_SELECTOR') }}"

# FIO-SPECIFIC PRE-CONDITIONING

- name: Replace the default fio profile with user-defined profile
  replace:
    path: "{{ pod_yaml_alias }}"
    regexp: "testtemplate"
    replace: "{{ lookup('env','FIO_TEST_PROFILE') }}"

- name: Replace the default I/O sample size with user-defined profile
  replace:
    path: "{{ pod_yaml_alias }}"
    regexp: "testsize"
    replace: "{{ lookup('env','FIO_SAMPLE_SIZE') }}"

- name: Replace the pvc placeholder with test param in app spec
  replace:
    path: "{{ pod_yaml_alias }}"
    regexp: "testclaim"
    replace: "{{ test_name }}"

- name: Replace the default I/O test duration with user-defined period
  replace:
    path: "{{ pod_yaml_alias }}"
    regexp: "testduration"
    replace: "{{ lookup('env','FIO_TESTRUN_PERIOD') }}"

- name: Get controller svc
  shell: >
    kubectl get svc -l openebs.io/controller-service=jiva-controller-svc
    -n e2e --no-headers -o custom-columns=:spec.clusterIP
  args:
    executable: /bin/bash
  register: controller_svc
  failed_when: controller_svc.stdout == ""

- name: Get controller response at /v1/volumes
  vars:
    volumes_endpoint: "9501/v1/volumes"
  uri:
    url: "http://{{ controller_svc.stdout }}:{{ volumes_endpoint }}"
    method: GET
    return_content: yes
    status_code: 200
    headers:
      Content-Type: "application/json"
    body_format: json
  register: json_response
  until: json_response.status == 200 and json_response.json.data[0].readOnly == "false"
  retries: 100
  delay: 60

- name: Deploy fio test job
  shell: >
    kubectl apply -f {{ pod_yaml_alias }} -n e2e
  args:
    executable: /bin/bash

- name: Get name of fio pod
  shell: >
     kubectl get pods -l name=fio -n e2e
     --no-headers
  args:
    executable: /bin/bash
  register: result
  until: "'fio' and 'Running' in result.stdout"
  delay: 10
  retries: 30

- name: Obtain name of fio pod
  set_fact:
    fio_pod_name: "{{ result.stdout.split()[0] }}"

- name: Check fio pod status
  shell: >
    kubectl get pod {{ fio_pod_name }} -n e2e
    --no-headers -o custom-columns=:status.phase
  args:
    executable: /bin/bash
  register: result
  failed_when: "result.stdout not in ['Running', 'Succeeded']"

- name: Confirm fio job completion status (poll and wait every 120 sec)
  shell: >
    kubectl get pod {{ fio_pod_name }} -n e2e
    --no-headers -o custom-columns=:status.phase
  args:
    executable: /bin/bash
  register: result
  until: "'Succeeded' in result.stdout"
  delay: 120
  retries: 30

- name: Verify the fio logs to check if run is complete w/o errors
  shell: >
    kubectl logs {{ fio_pod_name }} -n e2e
    | grep -i error | cut -d ":" -f 2
    | sort | uniq
  args:
    executable: /bin/bash
  register: result
  failed_when: result.stdout != " 0,"

- name: Get the name of replica pods
  shell: >
    kubectl get pods -l openebs.io/replica=jiva-replica
    -n e2e --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
  args:
    executable: /bin/bash
  register: replica_pod
  when: storage_class != 'jiva-csi-sc'

- name: Get the name of replica pods
  shell: >
    kubectl get pods -l openebs.io/component=jiva-replica
    -n e2e --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
  args:
    executable: /bin/bash
  register: replica_pod
  when: storage_class == 'jiva-csi-sc'

- name: Set the replica pod names to variables
  set_fact:
    replica_name_one: "{{ replica_pod.stdout_lines[0].split()[0] }}"
    replica_name_two: "{{ replica_pod.stdout_lines[1].split()[0] }}"

- name: Delete fio job
  shell: >
    kubectl delete -f {{ pod_yaml_alias }} -n e2e
  args:
    executable: /bin/bash

- name: Confirm fio pod has been deleted
  shell: >
    kubectl get pod -n e2e
  args:
    executable: /bin/bash
  register: fio_pod_status
  until: "'fio_pod_name' not in fio_pod_status.stdout"
  delay: 30
  retries: 12

- name: Pick one replica randomly from list of two for deletion
  set_fact:
    random_replica: "{{ line_item }}"
  with_random_choice:
     - "{{ replica_name_one }}"
     - "{{ replica_name_two }}"
  loop_control:
    loop_var: line_item

- name: Delete one of the replica
  shell: >
    kubectl delete pod {{ random_replica }} -n e2e
  args:
    executable: /bin/bash

- name: Confirm replica pod has been deleted
  shell: >
    kubectl get pods -n e2e
  args:
    executable: /bin/bash
  register: replica_pod_status
  until: "'random_replica' not in replica_pod_status.stdout"
  delay: 30
  retries: 12
