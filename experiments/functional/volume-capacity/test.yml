---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:
    - block:

          ## Generating the testname for deployment
        - include_tasks: /utils/fcm/create_testname.yml

          ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'SOT'

        - name: Obtain the application PV 
          shell: kubectl get pvc -n {{ app_ns }} -o jsonpath={.items[0].spec.volumeName}
          args:
            executable: /bin/bash
          register: pv_name

        - name: Obtain the application pod name
          shell: kubectl get pods -n {{ app_ns }} -l {{ app_label }} -o custom-columns=:.metadata.name --no-headers
          args:
            executable: /bin/bash
          register: app_pod

        - name: Obtain the mount path for the application
          shell: > 
              kubectl get pods -n {{ app_ns }} -l {{ app_label }} 
              -o custom-columns=:.spec.containers[].volumeMounts[].mountPath --no-headers
          args: 
              executable: /bin/bash
          register: mount

        - name: Fetch the Storage from PVC using namespace
          shell: kubectl get pvc -n {{ app_ns }} -o jsonpath={.items[0].spec.resources.requests.storage}
          args:
            executable: /bin/bash
          register: storage_capacity

        - name: Fetch the alphabet(G,M,m,g) from storage capacity
          shell: echo "{{ storage_capacity.stdout }}" | grep -o -E '[0-9]+'
          args:
            executable: /bin/bash
          register: value_str

        - set_fact:
            value_num: '{{ ( (value_str.stdout | int ) * 1024) |  int }}'

        - name: Generate the load to fill capacity of volume
          shell: >
              kubectl exec -it "{{ app_pod.stdout }}" -n "{{ app_ns }}" 
              -- sh -c "cd {{ mount.stdout }} && dd if=/dev/urandom of=volume.txt bs=1024k count={{ value_num }} >> test.txt && cat test.txt | grep test && rm test.txt"
          args:
              executable: /bin/bash
          register: load
          failed_when: "load.rc == 0"

        # - name: Check the application pod status
        #   shell: >
        #       kubectl get pods -n {{ app_ns }} -l {{ app_label }} 
        #       -o custom-columns=:.status.containerStatuses[].state.waiting.reason --no-headers
        #   args: 
        #     executable: /bin/bash
        #   register: app_status
        #   failed_when: "app_status.stdout not in 'CrashLoopBackOff'"   
         
          ###############################################################
          #  TODO:                                                      #
          #  - Include the recovery tasks to Resize the Volume.         #
          #  - Check the Application status post recovery steps.        #
          #  - Generate I/O post successfull recovery of application.   #
          ###############################################################

        - set_fact:
            flag: "Pass"

      rescue:
        - name: Setting fail flag
          set_fact:
            flag: "Fail"

      always:
        ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'EOT'          
