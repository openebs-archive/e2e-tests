---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
  - test_vars.yml
  - /mnt/parameters.yml

  tasks:
    - block:

        - name: Identify the data consistency util to be invoked
          template:
            src: data_persistence.j2
            dest: data_persistence.yml

        - include_vars:
            file: data_persistence.yml

        - name: Record the data consistency util path
          set_fact: 
            data_consistency_util_path: "{{ consistencyutil }}"
          when: data_persistence != ''

        ##RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/create_testname.yml

        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'SOT'

        ## DISPLAY APP INFORMATION

        - name: Display the app information passed via the test job
          debug:
            msg:
              - "Application information is as follows"
              - "Namespace        : {{ namespace }}"
              - "Label            : {{ label }}"
              - "STATUS           : {{ dc_status }}"

        ## APPLICATION LIVENESS CHECK
        
        - name: Verify that the AUT (Application Under Test) is running
          include_tasks: "/utils/k8s/status_app_pod.yml"
          vars:
            app_ns: "{{namespace}}"
            app_lkey: "{{ label.split('=')[0] }}"
            app_lvalue: "{{ label.split('=')[1] }}"
            delay: 5
            retries: 60

        - name: Get application pod name
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ label }} --no-headers
            -o custom-columns=:.metadata.name
          args:
            executable: /bin/bash
          register: app_pod_name

        - name: Check data_persistence
          include: "{{ data_consistency_util_path }}"
          vars:
            status: "{{ dc_status }}"
            ns: "{{ namespace }}"
            pod_name: "{{ app_pod_name.stdout }}"
          when: data_persistence != ''

        - set_fact:
            flag: "Pass"
      
      rescue:
        - set_fact:
            flag: "Fail"

      always:
        ##RECORD END-OF-TEST IN LITMUS RESULT CR 

        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'EOT'
            