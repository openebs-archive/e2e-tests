---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:
    - block:

      ## Generating the testname for deployment
        - include_tasks: /utils/fcm/create_testname.yml

         ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: "/utils/fcm/update_e2e_result_resource.yml"
          vars:
            status: 'SOT'

        - include_tasks: /utils/k8s/create_ns.yml

        - name: Obtain the size of CSPs
          shell: >
            kubectl get csp -l openebs.io/storage-pool-claim={{ pool_name }}
            --no-headers -o custom-columns=:status.capacity.free | head -n1 | awk '{print $1}'
          args:
            executable: /bin/bash
          register: free_size

        - name: Truncate the storage unit from free capacity
          shell: >
             kubectl get csp -l openebs.io/storage-pool-claim={{ pool_name}} --no-headers
             -o custom-columns=:status.capacity.free|rev | cut -c 2- |rev
          args:
            executable: /bin/bash
          register: free_capacity

        - name: Assign free size to a variable
          set_fact:
            capacity: "{{ free_size.stdout }}"

        - name: Populate PVC template with the variables
          template:
            src: create_pvc.j2
            dest: create_pvc.yml

        - name: Populate storageclass template with the variables
          template:
            src: storage_class.j2
            dest: storage_class.yml

        - name: Create storageclass
          shell: kubectl apply -f storage_class.yml
          args:
            executable: /bin/bash
          register: sc
          failed_when: sc.rc != 0

        - name: Display spc.yml for verification
          debug: var=item
          with_file:
            - "create_pvc.yml"

        - name: Create PVC with same size as that of pool
          shell: >
            kubectl apply -f create_pvc.yml -n {{ app_ns }}
          args:
            executable: /bin/bash
          register: result
          failed_when: result.rc != 0

        - name: Check if the PVC is not created successfully
          shell: >
            kubectl get pvc {{ app_pvc }} -n {{ app_ns }}
            --no-headers -o custom-columns=:status.phase
          args:
            executable: /bin/bash
          register: pvc_status
          until: "'Pending' in pvc_status.stdout"
          delay: 5
          retries: 3

        - set_fact:
            flag: "Pass"

      rescue:
        - name: Setting fail flag
          set_fact:
            flag: "Fail"

      always:

        - name: Delete the PersistentVolumeClaim 
          shell: > 
            kubectl delete pvc {{ app_pvc }} -n {{ app_ns }}
          args:
            executable: /bin/bash
          register: status
          failed_when: "status.rc != 0"

        ## RECORD END-OF-TEST RESULT IN LitmusResult CR
        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'EOT'
