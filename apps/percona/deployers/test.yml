---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:
    - block:

        ## Generating the testname for deployment
        - include_tasks: /utils/fcm/create_testname.yml

         ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: "/utils/fcm/update_e2e_result_resource.yml"
          vars:
            status: 'SOT'

        - block:

            - name: Replace the application namespace placeholder in cstorvolumpolicy spec
              replace:
                path: /utils/scm/openebs/csi-app-target-affinity-policy.yml
                regexp: "app-namespace"
                replace: "{{ lookup('env','APP_NAMESPACE') }}"

            - name: Get the application label values from env
              set_fact:
                 app_key: "{{ app_label.split('=')[0] }}"
                 application_label: "{{ app_label.split('=')[1] }}"                

            - name: Replace the application's label value placeholder in cstorvolumpolicy spec
              replace:
                path: /utils/scm/openebs/csi-app-target-affinity-policy.yml
                regexp: "app-label"
                replace: "{{ application_label }}"                

            - name: Deploying the application target affinity volume policy
              shell: kubectl apply -f /utils/scm/openebs/csi-app-target-affinity-policy.yml
              args:
                executable: /bin/bash

          when: app_target_affinity == 'cstor-csi'          

        - name: Identify the deployment spec to be invoked
          template:
            src: deployemnt_spec.j2
            dest: deployemnt_spec.yml

        - include_vars:
            file: deployemnt_spec.yml

        - name: Replace the storage capacity placeholder
          replace:
              path: "{{ application_deployment }}"
              regexp: "volume-capacity"
              replace: "{{ lookup('env','CAPACITY') }}" 

        - block:

            ## Actual test
            ## Creating namespaces and making the application for deployment
            - include_tasks: /utils/k8s/pre_create_app_deploy.yml

            - name: Display application deployment spec for verification
              debug: var=item
              with_file:
              - "{{ application_deployment }}"

            ## Deploying the application, upper bound wait time: 900s 
            - include_tasks: /utils/k8s/deploy_single_app.yml
              vars:
                check_app_pod: 'yes'
                delay: 5 
                retries: 180
    
            ## Fetching the pod name
            - include_tasks: /utils/k8s/fetch_app_pod.yml
    
            ## Checking the db is ready for connection
            - include_tasks: /utils/scm/applications/mysql/check_db_connection.yml
   
            ## Check application-target pod affinity
            - block:

                - include_tasks: /utils/scm/openebs/target_affinity_check.yml
                  when: app_target_affinity == 'cstor'

                - include_tasks: /utils/scm/openebs/csi_target_affinity_check.yml
                  when: app_target_affinity == 'cstor-csi'                  

              when: lookup('env','TARGET_AFFINITY_CHECK') == 'enable'

            - set_fact:
                flag: "Pass"  

          when: "'deprovision' not in action"  

        - block:

            - name: Deprovisioning the Application
              include_tasks: "/utils/k8s/deprovision_deployment.yml"
              vars:
                app_deployer: "{{ application_deployment }}"

            - set_fact:
                flag: "Pass"  

          when: "'deprovision' is in action"        

      rescue:
        - set_fact:
            flag: "Fail"     

      always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'EOT'
