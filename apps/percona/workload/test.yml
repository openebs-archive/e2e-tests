---
- hosts: localhost
  connection: local
  gather_facts: False


  vars_files:
    - test_vars.yml

  tasks:
    - block:
        - block:

            - name: Record test instance/run ID
              set_fact:
                run_id: "{{ lookup('env','RUN_ID') }}"

            - name: Construct testname appended with runID
              set_fact:
                test_name: "{{ test_name }}-{{ run_id }}"

          when: lookup('env','RUN_ID')
        
       ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'SOT'

        - name: Checking the status of test specific namespace.
          shell: kubectl get ns {{ namespace }} -o jsonpath='{.status.phase}'
          args:
           executable: /bin/bash
          register: npstatus
          until: "'Active' in npstatus.stdout"
          delay: 5 
          retries: 60

        # Ensuring if the application is running before starting load generation.

        - name: Checking whether application is running
          shell: kubectl get pod -n {{ namespace }} -l {{ app_label }}
          register: running_status
          until: "'Running' in running_status.stdout"
          delay: 5
          retries: 120

        - name: Obtaining the loadgen pod label from env.
          set_fact:
            loadgen_lkey: "{{ loadgen_label.split('=')[0] }}"
            loadgen_lvalue: "{{ loadgen_label.split('=')[1] }}"

        - name: Replace the label in loadgen job spec.
          replace:
            path: "{{ percona_loadgen }}"
            regexp: "loadgen_lkey: loadgen_lvalue"
            replace: "{{ loadgen_lkey }}: {{ loadgen_lvalue }}"

        - name: Replace the db-user placeholder in tpcc-config file
          replace:
            path: "{{ tpcc_conf }}"
            regexp: "test_user"
            replace: "{{ db_user }}"

        - name: Replace the password placeholder in tpcc-config file
          replace:
            path: "{{ tpcc_conf }}"
            regexp: "test_password"
            replace: "{{ db_password }}"

        - name: Replace the duration placeholder in tpcc-config file
          replace:
            path: "{{ tpcc_conf }}"
            regexp: "test_duration"
            replace: "{{ load_duration }}"

        - name: Replace the warehouse placeholder in tpcc-config file
          replace:
            path: "{{ tpcc_conf }}"
            regexp: "test_warehouse"
            replace: "{{ test_warehouse }}"

        - name: Replace the test connections placeholder in tpcc-config file
          replace:
            path: "{{ tpcc_conf }}"
            regexp: "test_connections"
            replace: "{{ test_connections }}"

        - name: Replace the test warmup-period placeholder in tpcc-config file
          replace:
            path: "{{ tpcc_conf }}"
            regexp: "test_warmup_period"
            replace: "{{ test_warmup_period }}"

        - name: Replace the test interval placeholder in tpcc-config file
          replace:
            path: "{{ tpcc_conf }}"
            regexp: "test_interval"
            replace: "{{ test_interval }}"            

        - name: Getting the Service IP of Application
          shell: kubectl get svc -n {{ namespace }} -l {{ app_service_label }} -o jsonpath='{.items[0].spec.clusterIP}'
          register: ip

        - name: Replace the Service IP placeholder
          replace:
            path: "{{ percona_loadgen }}"
            regexp: "service_ip"
            replace: "{{ ip.stdout }}"

        - name: Checking for configmap
          shell: kubectl get configmap -n {{ namespace }}
          register: configmap

        - name: Creating a kubernetes config map to hold the tpcc benchmark config
          shell: kubectl create configmap tpcc-config --from-file {{ tpcc_conf }} -n {{ namespace }}
          when: "'tpcc-config' not in configmap.stdout"

        # - name: Verifying successful creation of the configmap
        #   shell: kubectl describe configmap -n {{ namespace }}
        #   register: config
        #   until: "'tpcc-config' in config.stdout"
        #   delay: 6
        #   retries: 20

        - name: Create Percona Loadgen Job
          shell: kubectl apply -f {{ percona_loadgen }} -n {{ namespace }}

        - name: Verify load-gen pod is running
          shell: kubectl get pods -n {{ namespace }} -l {{ loadgen_label }} -o jsonpath='{.items[0].status.phase}'
          args:
            executable: /bin/bash
          register: result
          until: "'Running' in result.stdout"
          delay: 5
          retries: 60

        - name: Getting the Percona POD name
          shell: kubectl get po -n {{ namespace }} -l {{ app_label }} -o jsonpath='{.items[0].metadata.name}'
          register: pod_name

        - name: Verifying load-generation
          shell: kubectl exec -it {{ pod_name.stdout }} -n {{ namespace }} -- mysql -u{{ db_user }} -p{{ db_password }} -e "show databases"
          register: output
          until: "'tpcc-' in output.stdout"
          delay: 5
          retries: 120

        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"

      always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'EOT'
