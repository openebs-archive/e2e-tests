---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:
    - block:

        ## Generating the testname for deployment
        - include_tasks: /utils/fcm/create_testname.yml

        ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'SOT'

        ## Checking the status of test specific namespace.
        - include_tasks: /utils/k8s/status_testns.yml
          vars:
            app_ns: "{{namespace}}"      

        ## Checking if the application is deployed before starting load generation.
        - include_tasks: /utils/k8s/check_replica_count.yml
          vars:
            app_ns: "{{namespace}}"     
            app_label: "{{loadgen_label}}"

        - name: Obtaining the loadgen pod label from env.
          set_fact:
            loadgen_lkey: "{{ loadgen_label.split('=')[0] }}"
            loadgen_lvalue: "{{ loadgen_label.split('=')[1] }}"

        - name: Replace the label in loadgen job spec.
          replace:
            path: "{{ Redis_loadgen }}"
            regexp: "loadgen_lkey: loadgen_lvalue"
            replace: "{{ loadgen_lkey }}: {{ loadgen_lvalue }}"

        - name: Create Redis Loadgen Job
          shell: kubectl create -f {{ Redis_loadgen }} -n {{ namespace }}

        - name: Verify load is running for specified duration
          shell: kubectl get pods -n {{ namespace }} -l {{ loadgen_label }}
          args:
            executable: /bin/bash
          register: result
          until: "'Running' in result.stdout"
          delay: 30
          retries: 15

        - name: Wait for {{ (io_minutes) | int *60 }} secs to run load.
          wait_for:
            timeout: "{{ (io_minutes) | int *60 }}"

        - name: Obtaining the application pod name.
          shell: kubectl get statefulset -n {{ namespace }} --no-headers -l {{ application_label }} -o custom-columns=:metadata.name
          args:
            executable: /bin/bash
          register: result

        - name: Recording the application pod name.
          set_fact:
            app_name: "{{ result.stdout }}"

        - name: Forming one of the replicas name statefulset application name.
          set_fact:
            replica_name: "{{ app_name }}-0"


        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"

      always:

        ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'EOT'
