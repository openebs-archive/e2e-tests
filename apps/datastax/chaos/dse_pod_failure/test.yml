---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:
    - block:

        ## RECORD START-OF-TEST IN LITMUS RESULT CR

        - block:
 
            - name: Record test instance/run ID 
              set_fact: 
                run_id: "{{ lookup('env','RUN_ID') }}"
           
            - name: Construct testname appended with runID
              set_fact:
                test_name: "{{ test_name }}-{{ run_id }}"

          when: lookup('env','RUN_ID')

        - name: Generate the e2e result CR to reflect SOT (Start of Test) 
          template: 
            src: /e2e-result.j2
            dest: e2e-result.yaml
          vars: 
            test: "{{ test_name }}"
            chaostype: "application"
            app: "DSE"
            phase: in-progress
            verdict: none

        - name: Apply the e2e result CR
          shell: kubectl apply -f e2e-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"

        ## DISPLAY APP INFORMATION 
 
        - name: Display the app information passed via ENV.
          debug: 
            msg: 
              - "The application info is as follows:"
              - "Namespace    : {{ app_ns }}"
              - "Label        : {{ app_label }}"

        ## PRE-CHAOS APPLICATION LIVENESS CHECK
        - name: Verify that the AUT is running.
          include_tasks: /utils/k8s/check_deployment_status.yml

        - name: Get the application pod name using label.
          shell: >
            kubectl get pod  -n {{ app_ns }} -l {{ app_label }} -o jsonpath='{.items[0].metadata.name}'
          args:
            executable: /bin/bash
          register: app_pod_name

            ## APPLICATION FAULT INJECTION

        - include_tasks: /chaoslib/pumba/pod_failure_by_sigkill.yaml
          vars:
            action: "killapp"
            app_pod: "{{ app_pod_name.stdout }}"
            namespace: "{{ app_ns }}"
            label: "{{ app_label }}"

        - name: Verify AUT liveness post fault-injection
          include_tasks: /utils/k8s/check_deployment_status.yml
  
        - set_fact:
            flag: "Pass"

      rescue: 
        - set_fact: 
            flag: "Fail"

      always: 

        ## RECORD END-OF-TEST IN LITMUS RESULT CR
 
        - name: Generate the e2e result CR to reflect EOT (End of Test) 
          template: 
            src: /e2e-result.j2
            dest: e2e-result.yaml
          vars: 
            test: "{{ test_name }}"
            chaostype: ""
            app: ""
            phase: completed
            verdict: "{{ flag }}"
           
        - name: Apply the e2e result CR
          shell: kubectl apply -f e2e-result.yaml
          args:
            executable: /bin/bash
          register: lr_status 
          failed_when: "lr_status.rc != 0"
           
        - include_tasks: /chaoslib/pumba/pod_failure_by_sigkill.yaml 
          vars:
            action: "deletepumba"
            namespace: "{{ app_ns }}"
