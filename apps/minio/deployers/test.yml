---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:
    - block:

        ## Generating the testname for deployment
        - include_tasks: /utils/fcm/create_testname.yml

         ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: "/utils/fcm/update_e2e_result_resource.yml"
          vars:
            status: 'SOT'
         
        - name: Get the application label values from env
          set_fact:
            app_lkey: "{{ app_label.split('=')[0] }}"
            app_lvalue: "{{ app_label.split('=')[1] }}"

        - name: Replace the application label placeholder in service spec
          replace:
            path: "{{ pvc_deployment }}"
            regexp: "lkey: lvalue"
            replace: "{{ app_lkey }}: {{ app_lvalue }}"

        - name: Replace the storage capacity placeholder
          replace:
              path: "{{ pvc_deployment }}"
              regexp: "volume-capacity"
              replace: "{{ lookup('env','CAPACITY') }}" 

        - name: Replace the storage class placeholder
          replace:
              path: "{{ pvc_deployment }}"
              regexp: "testclass"
              replace: "{{ lookup('env','PROVIDER_STORAGE_CLASS') }}" 

        - name: Replace the PVC name placeholder
          replace:
              path: "{{ pvc_deployment }}"
              regexp: "testclaim"
              replace: "{{ lookup('env','APP_PVC') }}"

        - name: Replace the PVC access method placeholder
          replace:
              path: "{{ pvc_deployment }}"
              regexp: "ReadWriteOnce"
              replace: "{{ lookup('env','ACCESS_MODE') }}"
 
        - name: Replace the PVC name placeholder with PVC created earlier
          replace:
              path: "{{ application_deployment }}"
              regexp: "testclaim"
              replace: "{{ lookup('env','APP_PVC') }}"

        - block: 
            - name: Check whether the provider storageclass is applied
              k8s_facts:
                kind: StorageClass
                name: "{{ lookup('env','PROVIDER_STORAGE_CLASS') }}"
              register: result
              failed_when: result.resources | length < 1

              # Creating namespace
            - include_tasks: /utils/k8s/create_ns.yml
            
            - name: Applying the pvc
              shell: kubectl apply -f minio-pvc.yml -n {{ app_ns }}
              args:
                executable: /bin/bash
              register: status
              failed_when: "status.rc != 0"

            - name: Checking the status of PVC
              shell: kubectl get pvc {{ app_pvc }} -n {{ app_ns }} -o jsonpath='{.status.phase}'
              register: pvc_status
              until: "'Bound' in pvc_status.stdout"
              delay: 30
              retries: 15

          when: lookup('env','ACTION') == 'provision'      
              
      ## create and delete the deployments according to action
        - include_tasks: ./minio_prerequisites.yml
          loop: "{{ range(0, deploy_count | int, 1)|list }}"

        - block:
            ## verify and delete the pvc and service
            - name: Deleting the PVC and service
              shell: kubectl delete -f minio-pvc.yml -n {{ app_ns }}
              args:
                executable: /bin/bash
              register: status
              failed_when: "status.rc != 0"

            ## verify if the pvc is deleted
            - name: check if the pvc is deleted successfully
              shell: >
                kubectl get pvc -n {{ app_ns }}
              args:
                executable: /bin/bash
              register: pvc_name
              until: "app_pvc not in pvc_name.stdout"
              delay: 30
              retries: 15   
                        
            - name: Check if the service is deleted successfully
              shell: >
                kubectl get service -n {{ app_ns }} -l "{{ app_lkey }}={{ app_lvalue }}" --no-headers 
              args:
                executable: /bin/bash
              register: result
              until: "result.stdout == ''"
              delay: 30
              retries: 15  

            - name: Delete the namespace.
              k8s:
                state: absent
                kind: Namespace
                name: "{{ app_ns }}"

            - name: Check if the namespace is deleted successfully
              shell: kubectl get ns 
              args:
                executable: /bin/bash
              register: result
              until: "app_ns not in result.stdout"
              delay: 30
              retries: 15  
                
          when: lookup('env','ACTION') == 'deprovision'

        - set_fact:
                flag: "Pass"  
         
      rescue:
        - set_fact:
            flag: "Fail"     

      always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'EOT'
              