---
# This playbook generates the load on the cockroachdb application already deployed on the cluster.
# Steps:
# 1) Create e2e-result customr resource for logging.
# 2) Create cockroachdb loadgen job
# 3) Verify if the corresponding pod is running successfully.

- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:

    - block:
        - block:

            - name: Record test instance/run ID
              set_fact:
                run_id: "{{ lookup('env','RUN_ID') }}"

            - name: Construct testname appended with runID
              set_fact:
                test_name: "{{ test_name }}-{{ run_id }}"

          when: lookup('env','RUN_ID')

           ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'SOT'

        - name: Checking the status  of test specific namespace.
          shell: kubectl get ns {{ namespace }} -o jsonpath='{.status.phase}'
          args:
           executable: /bin/bash
          register: npstatus
          until: "'Active' in npstatus.stdout"
          delay: 30
          retries: 10
     
        # Check if the application is deployed.

        - name: Obtain the number of statefulset replicas.
          shell: kubectl get statefulset -n {{ namespace }} -l {{ app_label }} -o custom-columns=:spec.replicas
          args:
            executable: /bin/bash
          register: rep_count
          until: "rep_count.rc == 0"
          delay: 60
          retries: 15

        - name: Obtain the ready replica count and compare with the replica count.
          shell: kubectl get statefulset -n {{ namespace }} -l {{ app_label }} -o custom-columns=:..readyReplicas
          args:
            executable: /bin/bash
          register: ready_rep
          until: "ready_rep.rc == 0 and ready_rep.stdout|int == rep_count.stdout|int"
          delay: 60
          retries: 30

        - name: Obtaining the application label from env.
          set_fact:
            app_lkey: "{{ app_label.split('=')[0] }}"
            app_lvalue: "{{ app_label.split('=')[1] }}"

        - name: Obtaining the service name.
          shell: kubectl get svc -n {{ namespace }} -l {{ app_lkey }}={{ app_lvalue }} -o jsonpath='{.items[0].metadata.name}'
          args:
            executable: /bin/bash
          register: svc_name

        - name: Recording the service name.
          set_fact:
            svc_name: "{{ svc_name.stdout }}"

        - name: Form FQDN using namespace and service name.
          set_fact:
            fqdn: "{{ namespace }}.{{svc_name}}.svc.cluster.local"

        - name: Obtaining the loadgen pod label from env.
          set_fact:
            loadgen_lkey: "{{ loadgen_label.split('=')[0] }}"
            loadgen_lvalue: "{{ loadgen_label.split('=')[1] }}"

        - name: Replace the label in loadgen job spec.
          replace:
            path: "{{ cockroachdb_loadgen }}"
            regexp: "loadgen_lkey: loadgen_lvalue"
            replace: "{{ loadgen_lkey }}: {{ loadgen_lvalue }}"

        - name: Place the FQDN in loadgen yaml.
          replace:
            path: "{{ cockroachdb_loadgen }}"
            regexp: 'fqdn'
            replace: "{{ fqdn }}"

        - name: Updating the time duration in loadgen yaml.
          replace:
            path: "{{ cockroachdb_loadgen }}"
            regexp: 'time_duration'
            replace: "{{ lookup('env','TIME_INTERVAL') }}"

        - name: Creating cockroachdb loadgen job.
          shell: kubectl apply -f {{ cockroachdb_loadgen }} -n {{ namespace }}
          args:
            executable: /bin/bash
          register: result
          failed_when: 'result.rc != 0'

        - name: Obtain the cockroachdb pod name
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ app_lkey }}={{ app_lvalue }} -o jsonpath='{.items[0].metadata.name}'
          args:
            executable: /bin/bash
          register: pod_name

        - name: Verify the data written
          shell: >
            kubectl exec -it {{ pod_name.stdout }} -n {{ namespace }} -- /cockroach/cockroach sql --insecure
            --host=cockroachdb-public.cockroachdb -d test -e 'show tables;'
          args:
            executable: /bin/bash
          register: tables
          until: "'kv' in tables.stdout"
          delay: 60
          retries: 5

        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"

      always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'EOT'
